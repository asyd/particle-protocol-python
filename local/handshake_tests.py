#!/usr/bin/env python3

__author__ = 'asyd'
import rsa
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization, hmac, hashes
from cryptography.hazmat.primitives.asymmetric import padding

encrypted_random_hex = [0x57, 0x95, 0x87, 0x02, 0x08, 0x79, 0x95, 0xe5,
                        0x85, 0x78, 0x4a, 0xe5, 0x77, 0x6a, 0x1b, 0x56,
                        0x44, 0xd4, 0x06, 0x69, 0x64, 0xe8, 0xd1, 0xb6,
                        0x16, 0x25, 0x8b, 0x67, 0xa1, 0x79, 0xfd, 0x0f,
                        0x80, 0x25, 0xfb, 0xaa, 0x7e, 0xba, 0x41, 0x7a]

session_key_hex = [0x3c, 0x1e, 0xa1, 0xb6, 0xc8, 0xe2, 0xa5, 0x0e,
                   0x0c, 0xfa, 0xda, 0x4a, 0x5e, 0x76, 0x89, 0x62,
                   0x0e, 0x65, 0x4b, 0x3c, 0x5a, 0xf8, 0xe0, 0xbd,
                   0x07, 0xd5, 0xdd, 0x24, 0x51, 0x99, 0xe9, 0xf1,
                   0x96, 0xbb, 0x9b, 0x06, 0x4a, 0xb1, 0xd5, 0x83,
                   0x17, 0xf2, 0xf3, 0xc8, 0x10, 0x01, 0xfe, 0x64,
                   0x9b, 0xfa, 0xbe, 0x46, 0xfe, 0x72, 0x95, 0xb7,
                   0x1d, 0x00, 0xd9, 0xc0, 0x7e, 0xe1, 0x70, 0x12,
                   0xf1, 0x62, 0x09, 0x59, 0x56, 0x97, 0xa6, 0xc2,
                   0x84, 0x34, 0xcb, 0xa2, 0xc0, 0x4c, 0x86, 0x31,
                   0xd2, 0x8a, 0x76, 0x35, 0xdc, 0xea, 0xd7, 0x16,
                   0xb7, 0x3e, 0xf7, 0x83, 0x3a, 0x5a, 0x41, 0x2d,
                   0x2e, 0xd9, 0x68, 0xf3, 0x3e, 0x89, 0xc1, 0x65,
                   0xf1, 0xbe, 0xff, 0xc2, 0x69, 0x82, 0x01, 0xf2,
                   0x6b, 0xd1, 0xac, 0xa1, 0x40, 0x0e, 0x11, 0xdd,
                   0xac, 0xe5, 0x76, 0xa8, 0x31, 0x1f, 0xbb, 0x1d,
                   0x19, 0x6c, 0x3f, 0xe6, 0xd6, 0x5d, 0x04, 0x70,
                   0x2f, 0xcb, 0x2c, 0x57, 0xb8, 0xd8, 0x9a, 0x0a,
                   0xe7, 0xda, 0x09, 0xba, 0xdd, 0x9e, 0x66, 0xb3,
                   0xa1, 0x52, 0x40, 0x6c, 0xe4, 0xcb, 0x4f, 0xd4,
                   0x78, 0x4d, 0xc6, 0xea, 0x90, 0x28, 0x85, 0x9f,
                   0x3a, 0xca, 0x2a, 0x0e, 0x7e, 0x56, 0x75, 0x0b,
                   0xa0, 0x0a, 0xb9, 0x99, 0x09, 0xad, 0x13, 0xd4,
                   0x8c, 0x9b, 0x51, 0x92, 0xf8, 0x3d, 0xd0, 0x77,
                   0x55, 0xc3, 0x50, 0xc4, 0xd4, 0xe7, 0x55, 0xc8,
                   0xc4, 0x77, 0x9c, 0xfe, 0x89, 0x59, 0xc7, 0x92,
                   0xe5, 0xc5, 0xa0, 0x81, 0xad, 0xc1, 0xcf, 0xe2,
                   0xb2, 0xa5, 0xff, 0x9d, 0x29, 0xa0, 0xb5, 0x90,
                   0xd6, 0x35, 0x1f, 0x79, 0xd7, 0x3c, 0xcf, 0x07,
                   0xb1, 0x3c, 0x7b, 0x92, 0xf5, 0x5c, 0xc1, 0x8a,
                   0x8a, 0x64, 0x19, 0x25, 0xf6, 0x88, 0x62, 0x3d,
                   0xc0, 0x25, 0xa1, 0xae, 0x88, 0x92, 0x67, 0x99]

device_key_file = '/home/asyd/Sources/particle-protocol-python/local/devicekey.pem'
server_key_file = '/home/asyd/Sources/particle-protocol-python/privatekey.pem'
rsa_device_key = None
rsa_server_key = None
hazmat_server_key = None
hazmat_device_key = None

session_key_encrypt = bytes()

for c in session_key_hex:
    session_key_encrypt = session_key_encrypt + bytes([c])

print('Len of session_key_encrypt: %s' % len(session_key_encrypt))

# Loading keys using RSA Module
with open(device_key_file, "rb") as key_file:
    keydata = key_file.read()
rsa_device_key = rsa.PrivateKey.load_pkcs1(keydata)

with open(server_key_file, "rb") as key_file:
    keydata = key_file.read()
rsa_server_key = rsa.PrivateKey.load_pkcs1(keydata)

# Loading keys using hazmat module
with open(server_key_file, "rb") as key:
    hazmat_server_key = serialization.load_pem_private_key(
        key.read(),
        password=None,
        backend=default_backend()
    )

print("Server key size: %s" % hazmat_server_key.key_size)

print("Hazmat: %s" % hazmat_server_key.decrypt(
    session_key_encrypt,
    padding.PKCS1v15(),
))
# Try to decrypt session_key
print("RSA   : %s" % rsa.decrypt(session_key_encrypt, rsa_server_key))
